{
	"JobReader": {
		"Guid": null,
		"JobKey": "UPSERT_DataModelObjects",
		"SqlRead": "SELECT  T._keyid_ as id, T._modelid_ as modelId, T._model_keyname_ as modelKeyName, T.jsonData\nFROM         \n(\n   -- PROVIDE THE DATA MAPPING IN THE VIEWS\n   SELECT * FROM vAllModelJSON\n) T \nLEFT JOIN  (SELECT modelId, propertyId, id, MAX(keyFieldName) as keyFieldName\n         --, MAX(targetUpdatedOn) as targetUpdatedOn   -- this field helps detect changes in target that should trigger an update -- comment to ignore\n\tFROM [Form].[datamodelobjects] \n\tGROUP BY modelId, propertyId, id)\n\tF ON \n  T.[_modelid_] = F.modelId \n  AND T.[_model_keyname_] = F.[keyFieldName]\n  AND CAST(T.[_keyid_] as NVARCHAR(255)) = CAST(F.[id] as NVARCHAR(255))",
		"Path": "C:\\Tmp",
		"UpsertColumns": "id,modelId",
		"TimestampCol": "",
		"LastTsPointer": null,
		"LastTsDelPointer": null,
		"ConnectionString": "sql",
		"PropagateDelete": false,
		"SyncStrategy": "Full",
		"CreatedOn": "2024-07-19T14:03:42.673",
		"Status": "ready",
		"Initialize": false,
		"Active": true,
		"LastRunTime": "2024-07-19T14:24:20.217",
		"CronSchedule": "",
		"JsonData": {
			"AuditLogEnabled": true,
			"KeepChangedLogFiles": false,
			"EncryptionFile": "",
			"BypassTopN": false,
			"TopNOverride": 0,
			"DirectWriter": "__UPSERT_DataModelObjects",
			"ExecutionTimeout": 0,
			"BypassSchemaDetection": false,
			"DeletedRecordsMethod": 0,
			"DeletedRecordsSQL": null,
			"CDCTokenDeletedField": "",
			"MessagingOptions": null,
			"DriveSourceSettings": null,
			"Column2TableTxSettings": null,
			"HttpSourceSettings": null,
			"BigDataSourceSettings": null,
			"JobTriggers": [],
			"JobTriggersEnabled": false,
			"CDCSettings": null,
			"DynamicParameter": null,
			"JobDocumentation": "{\\rtf1\\ansi\\ansicpg1252\\deff0\\nouicompat\\deflang1033{\\fonttbl{\\f0\\fnil\\fcharset0 Microsoft Sans Serif;}{\\f1\\fnil\\fcharset2 Symbol;}}\r\n{\\colortbl ;\\red0\\green0\\blue0;}\r\n{\\*\\generator Riched20 10.0.22621}\\viewkind4\\uc1 \r\n\\pard\\cf1\\kerning24\\f0\\fs24 This job reads from a view (vAllModelJSON) that returns an aggregated list of records that represent the source data for Form.com Data Model Objects. This job assumes that all source records are extracted from the System of Record (SoR) and that Form.com object models need to be added, or updated, as necessary. In addition, this job will eliminate records that have not changed in the source system to avoid sending unnecessary updates to Form.com. \\par\r\n\\par\r\n\\b About vAllModelJSON\\par\r\n\\b0\\par\r\nThis view must return source records as a JSON document (jsonData) along with all the necessary keys to update the target record in Form.com. If any data is updated in the source system, the jsonData content will be different and will be identified as \"modified\" by the CDC engine.  \\par\r\n\\par\r\n\\b IMPORTANT\\b0  - the source data should contain fields that will be always different, such as the current date (GETDATE()), otherwise all records will be considered different on every execution. \\par\r\n\\par\r\n\\b IMPORTANT\\b0  - the view should return the JSON document already mapped with the expected target field names in Form.com to avoid further conversion later.\\par\r\n\\par\r\n\\b IMPORTANT\\b0  - the view should remove any special/unsupported JSON or XML characters, including: @\\{\\}<>/'\\\\&\\par\r\n\\par\r\n\\b About the Target\\par\r\n\\b0\\par\r\nThe target is configured to process all incoming records, both New and Updated. Because Form.com requires a different payload for each, and because the changes are sent as a Key/Pair array, the target pipeline builds the expected payload for each record as an XML payload, which is injected in the target payload (the \\b\\{\\{xmlEntries\\}\\}\\b0  field). In addition, the body expects a different SOAP Action for inserts and updates; the target pipeline also calculates this field based on the record. \\par\r\n\\par\r\n\\b Considerations\\par\r\n\\b0\\par\r\n\r\n\\pard{\\pntext\\f1\\'B7\\tab}{\\*\\pn\\pnlvlblt\\pnf1\\pnindent0{\\pntxtb\\'B7}}\\fi-450\\li450 This job assumes keys in Form.com are 255 characters or shorter\\par\r\n{\\pntext\\f1\\'B7\\tab}This job does not keep Change Logs by default and uses a DLQ folder to move failed logs that must exist  (the DLQ can be found under Advanced Settings -> Error Handling)\\par\r\n{\\pntext\\f1\\'B7\\tab}This job will stop processing if any error is detected; however, if you would like to push all changes even if a few fail, change the \\b Continue On HTTP Errors\\b0  setting accordingly. \\par\r\n\r\n\\pard\\cf0\\kerning0\\fs17\\par\r\n}\r\n",
			"JobDocumentationZoomFactor": 1.1,
			"Certificates": {
				"SignatureCert": "",
				"EncryptionCert": ""
			}
		},
		"Tags": "form",
		"SystemName": "SQLServer",
		"PipelineDef": []
	},
	"JobWriter": {
		"Guid": null,
		"JobKey": "__UPSERT_DataModelObjects",
		"Path": "C:\\Tmp",
		"UpsertColumns": "id,modelId",
		"ConnectionString": "form_noToken",
		"PropagateDelete": false,
		"SourceJobKey": "UPSERT_DataModelObjects",
		"LastExecutionId": null,
		"InitialExecutionId": "",
		"CreatedOn": "2024-07-19T14:03:42.667",
		"Status": "ready",
		"Active": true,
		"LastRunTime": "2024-07-19T14:24:21.34",
		"CronSchedule": "",
		"JsonData": {
			"EncryptionFile": "",
			"Salt": "",
			"KEK": "",
			"Certificates": {
				"CheckSignature": false
			}
		},
		"TargetSystem": "HTTP",
		"TargetObject": null,
		"UpsertScript": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:aut=\"http://model.v81.api.keysurvey.com\">\n<soapenv:Header/>\n  <soapenv:Body>\n      <aut:{{soapAction}}>\n        <modelId>{{modelId}}</modelId>\n         <model>\n          <properties>{{xmlEntries}}\n          </properties>\n        <keyFieldName>{{keyFieldName}}</keyFieldName>{{editPropertyNode}}\n     </model>\n  </aut:{{soapAction}}>\n</soapenv:Body>\n</soapenv:Envelope>\n\n",
		"DeleteScript": "",
		"LastSchemaHash": "",
		"Options": {
			"ExecTimeout": 5,
			"BatchCount": 1,
			"HttpUpsertSettings": {
				"IsRESTRequest": false,
				"HTTPURI": "/Member/api/v81/model/DataModelsService",
				"HTTPVerb": "POST",
				"HTTPContentType": "text/xml",
				"HTTPHeaders": "",
				"HTTPPayload": null,
				"IgnoreBatchErrorCodes": null,
				"BatchFinalizationSettings": null
				}
			},
			"HttpDeleteSettings": {
				"IsRESTRequest": false,
				"HTTPURI": "",
				"HTTPVerb": "",
				"HTTPContentType": "",
				"HTTPHeaders": "",
				"HTTPPayload": null,
				"IgnoreBatchErrorCodes": null,
				"BatchFinalizationSettings": null
			},
			"AuditLogEnabled": true,
			"ErrorHandling": {
				"ActionOnFail": 2,
				"RetryCount": 0,
				"RetryTTLSeconds": 0,
				"RetryExponential": false,
				"DeadLetterQueuePath": "C:\\Tmp\\dlq"
			}
		},
		"SystemName": "Generic",
		"PipelineDef": "[{\"TableName\":\"test.sink\",\"TruncateIfExists\":false,\"RecreateIfExists\":false,\"ConnectionKey\":\"sql\",\"PipelineConnections\":null,\"Name\":\"DataSink\",\"UsesPipelineConnections\":true,\"Disabled\":true,\"CanAffectSchema\":false,\"CanAffectData\":false},{\"SQLCommand\":\"\\nSELECT \\n\\tmodelId, id, MIN(propertyId) as propertyId, MIN(keyFieldName) as keyFieldName, \\n\\toperation = CASE WHEN MIN(propertyId) IS NULL THEN 'I' ELSE 'U' END,\\n\\tsoapAction = CASE WHEN MIN(propertyId) IS NULL THEN 'addModelObject' ELSE 'editModelObject' END,\\n\\teditPropertyNode = CASE WHEN MIN(propertyId) IS NULL THEN '' ELSE '\\n        <id>' + CAST(MIN(propertyId) as NVARCHAR(255)) + '</id>' END,\\n\\tSTRING_AGG(prop, '') as xmlEntries\\nFROM (\\n\\tSELECT\\n\\t\\tmodelId, id, keyFieldName, propertyId,\\n\\t\\t'\\n               <entry><key>' + [key] + '</key><value>' + ISNULL([value], '') + '</value></entry>' as prop\\n\\tFROM (\\n\\t\\tSELECT \\n\\t\\t\\tA.modelid, A.id, A.modelKeyName as keyFieldName, M.propertyId,\\n\\t\\t\\tB.[Key] ,B.[Value]\\n\\t\\t--SELECT * \\n\\t\\tFROM  @pipelinedata() A  -- SELECT * FROM test.sink A \\n\\t\\tCROSS APPLY OpenJSON( (Select A.jsonData) ) B \\n\\t\\tLEFT JOIN (\\n\\t\\t\\tSELECT modelId, propertyId, id, MAX(keyFieldName) as keyFieldName\\n         \\tFROM [Form].[datamodelobjects] \\n\\t\\t\\tGROUP BY modelId, propertyId, id\\n\\t\\t\\t) M ON M.modelId = A.modelId AND CAST(M.id as NVARCHAR(255)) = CAST(A.id as NVARCHAR(255))\\n\\t\\tWHERE B.[key] NOT IN ('_modelid_', '_keyid_', '_model_keyname_')\\n\\t) T\\n) E GROUP BY modelId, id\",\"ExecTimeout\":0,\"ReplaceDataSet\":true,\"IgnoreOnError\":false,\"ConnectionKey\":\"sql\",\"PipelineConnections\":null,\"Name\":\"DataRunSQL\",\"UsesPipelineConnections\":true,\"Disabled\":false,\"CanAffectSchema\":true,\"CanAffectData\":true}]",
		"Tags": ""
	},
	"InitializeOptions": null
}
